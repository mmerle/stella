---
const { title, description } = Astro.props;
import '@styles/global.css';
import '@styles/utils.css';
import Header from '@components/header.astro';
import Footer from '@components/footer.astro';
import GridOverlay from '@components/grid-overlay/index.jsx';
import { AstroFont } from 'astro-font';
---

<html lang="en-CA">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta property="og:image" content="/assets/opengraph-image.jpg" />
    <AstroFont
      config={[
        {
          name: 'Helvetica Now',
          src: [
            {
              style: 'normal',
              weight: '50 1000',
              path: '/fonts/HelveticaNowVar.woff2',
            },
          ],
          display: 'swap',
          preload: true,
          selector: 'html',
          fallback: 'sans-serif',
          cssVariable: 'helvetica-now',
        },
      ]}
    />
    <title>{title ? `${title} â€” Stella` : `Stella`}</title>
  </head>

  <body>
    <GridOverlay client:only="react" />

    <div id="app">
      <Header />
      <main>
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<style>
  #app {
    display: grid;
    grid-template-rows: auto 1fr auto;
    min-height: calc(var(--dvh, 1vh) * 100);
    isolation: isolate;
  }

  main {
    position: relative;
    display: flex;
    flex-direction: column;
  }
</style>

<script>
  // viewport
  function onWindowResize() {
    document.documentElement.style.setProperty('--vw', window.innerWidth * 0.01 + 'px');
    document.documentElement.style.setProperty('--dvh', window.innerHeight * 0.01 + 'px');
    document.documentElement.style.setProperty(
      '--svh',
      document.documentElement.clientHeight * 0.01 + 'px',
    );
    document.documentElement.style.setProperty('--lvh', '1vh');
  }

  window.addEventListener('resize', onWindowResize);
  onWindowResize();

  window.addEventListener('beforeunload', () => {
    window.removeEventListener('resize', onWindowResize);
  });

  // lenis
  import Lenis from 'lenis';
  const lenis = new Lenis({
    lerp: 0.07,
  });

  function onRaf(time) {
    lenis.raf(time);
    requestAnimationFrame(onRaf);
  }

  requestAnimationFrame(onRaf);

  // persistent theme
  const themes = ['light', 'dark', 'system'];
  const themeSwitcher = document.querySelector('[name="themeSwitcher"]');
  const currentTheme =
    document.cookie.replace(/(?:(?:^|.*;\s*)theme\s*\=\s*([^;]*).*$)|^.*$/, '$1') || 'system';

  function changeTheme(theme) {
    document.documentElement.setAttribute('data-theme', theme);
  }

  function saveTheme(theme) {
    const d = new Date();
    d.setTime(d.getTime() + 365 * 86400000);
    document.cookie = `theme=${theme};expires=${d.toUTCString()}`;
  }

  function cycleTheme() {
    const currentIndex = themes.indexOf(document.documentElement.getAttribute('data-theme'));
    const nextTheme = themes[(currentIndex + 1) % themes.length];
    changeTheme(nextTheme);
    saveTheme(nextTheme);
  }

  themeSwitcher?.addEventListener('click', cycleTheme);

  changeTheme(currentTheme);
</script>
