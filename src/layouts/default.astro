---
const { title, description } = Astro.props;
import "@styles/global.css";
import Header from "@components/header.astro";
import Footer from "@components/footer.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.svg" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta property="og:image" content="/assets/opengraph-image.jpg" />
    <title>{title ? `${title} â€” Stella` : `Stella`}</title>
  </head>

  <body>
    <div id="app">
      <Header />
      <main>
        <slot />
      </main>
      <Footer />
    </div>
  </body>
</html>

<style>
  #app {
    display: grid;
    grid-template-rows: auto 1fr auto;
    min-height: calc(var(--dvh, 1vh) * 100);
  }

  main {
    position: relative;
    display: flex;
    flex-direction: column;
  }
</style>

<script>
  // viewport
  function onWindowResize() {
    document.documentElement.style.setProperty(
      "--vw",
      window.innerWidth * 0.01 + "px",
    );
    document.documentElement.style.setProperty(
      "--dvh",
      window.innerHeight * 0.01 + "px",
    );
    document.documentElement.style.setProperty(
      "--svh",
      document.documentElement.clientHeight * 0.01 + "px",
    );
    document.documentElement.style.setProperty("--lvh", "1vh");
  }

  window.addEventListener("resize", onWindowResize);
  onWindowResize();

  window.addEventListener("beforeunload", () => {
    window.removeEventListener("resize", onWindowResize);
  });

  // lenis
  import Lenis from "lenis";
  const lenis = new Lenis({
    lerp: 0.1,
  });

  function onRaf(time) {
    lenis.raf(time);
    requestAnimationFrame(onRaf);
  }

  requestAnimationFrame(onRaf);

  // persistent theme
  const themeToggles = document.querySelectorAll('[name="theme-switcher"]');

  function changeTheme(theme) {
    document.documentElement.setAttribute("data-theme", theme);
  }

  function saveTheme(theme) {
    const d = new Date();
    d.setTime(d.getTime() + 365 * 86400000);
    document.cookie = `theme=${theme};expires=${d.toUTCString()}`;
  }

  function handleTheme(e: Event) {
    const theme = (e.target as HTMLElement).id;
    changeTheme(theme);
    saveTheme(theme);
  }

  themeToggles.forEach((t) => t.addEventListener("change", handleTheme));
</script>
